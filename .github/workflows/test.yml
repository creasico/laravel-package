name: Tests

on:
  schedule: # scheduled to run at 23.00 on Saturday (UTC), means 6.00 on Monday (WIB)
    - cron: '0 23 * * 6'
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
  CC_TEST_REPORTER_URL: ${{ vars.CC_TEST_REPORTER_URL }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      composer-cache: ${{ steps.prepare.outputs.composer-cache }}
      enable-reports: ${{ steps.reports.outputs.enabled }}

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          ini-values: error_reporting=E_ALL
          tools: composer:v2
          coverage: none
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare environment
        id: prepare
        run: |
          git config user.name "Creasi.HQ" && git config user.email "dev@creasi.co"
          echo "composer-cache=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Should have reports
        id: reports
        run: |
         echo "enabled=$(if [[ -z \"${CC_TEST_REPORTER_ID}\" ]]; then echo '0'; else echo '1'; fi)" >> $GITHUB_OUTPUT

  tests:
    name: Test on PHP ${{ matrix.php }} with DB ${{ matrix.db }}
    runs-on: ubuntu-latest
    needs: prepare
    env:
      DB_CONNECTION: ${{ matrix.db }}
      DB_DATABASE: ${{ github.repository_owner }}
      DB_USERNAME: ${{ github.repository_owner }}
      DB_PASSWORD: 'secret'

    services:
      postgresql:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.DB_DATABASE }}
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 5432:5432
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_USER: ${{ env.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306

    strategy:
      fail-fast: false
      matrix:
        php: [8.1, 8.2]
        db: ['mysql', 'pgsql', 'sqlite']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: error_reporting=E_ALL
          tools: composer:v2
          coverage: xdebug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ needs.prepare.outputs.composer-cache }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-

      - name: Install dependencies
        run: composer update --prefer-dist --no-interaction --no-progress

      - name: Run tests
        run: composer test -- --coverage

      - name: Generate reports for CodeClimate
        if: ${{ github.actor != 'dependabot[bot]' }}
        env:
          COVERAGE_FILE: tests/reports/clover.xml
          CODECLIMATE_REPORT: ${{ github.workspace }}/tests/reports/codeclimate.${{ matrix.php }}.json
        run: |
          curl -LSs $CC_TEST_REPORTER_URL > ./cc-test-reporter && chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t clover -o $CODECLIMATE_REPORT $COVERAGE_FILE

      - name: Upload tests reports
        uses: actions/upload-artifact@v4
        if: ${{ github.actor != 'dependabot[bot]' || needs.prepare.outputs.enable-reports }}
        with:
          name: test-reports-${{ matrix.php }}-${{ matrix.db }}
          path: tests/reports

  reports:
    name: Report Test Coverages
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          pattern: test-reports-*
          merge-multiple: true

      - name: Report to CodeClimate
        run: |
          curl -LSs $CC_TEST_REPORTER_URL > ./cc-test-reporter && chmod +x ./cc-test-reporter
          ./cc-test-reporter sum-coverage -o - codeclimate.*.json | ./cc-test-reporter upload-coverage --input -
